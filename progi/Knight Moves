#include <bits/stdc++.h>
#define sz(x) ((int)x.size())
#define ff first
#define ss second
using namespace std;

const int maxn=10;

// 2, 1, -1, -2, -2, -1, 1, 2
// 1, 2, 2, 1, -1, -2, -2, -1
int mt[maxn][maxn];
int vi[]={2, 1, -1, -2, -2, -1, 1, 2}, vj[]={1, 2, 2, 1, -1, -2, -2, -1};

void bfs(int i, int j){
	mt[i][j]=0;
	queue<pair<int,int>> q; q.push({i,j});
	while(!q.empty()){
		int x = q.front().ff, y = q.front().ss;q.pop();
		for(int k=0;k<8;k++){
			int ni = x+vi[k], nj = y+vj[k];
			if(ni>=0&&ni<8&&nj>=0&&nj<8&&mt[ni][nj]==-1){
				mt[ni][nj]=mt[x][y]+1;
				q.push({ni,nj});
			}
		}
	}
}

int main(){
	string xa;
	while(getline(cin, xa)){
		memset(mt, -1, sizeof(mt));
		stringstream ss(xa);
		string aux;
		vector<string> token;
		while(ss>>aux) token.push_back(aux);
		int oi, oj, di, dj;
		oi=token[0][0]-97;oj=token[0][1]-49;
		di=token[1][0]-97;dj=token[1][1]-49;
		bfs(oi, oj);
		cout<<"To get from "<<token[0]<<" to "<<token[1]<<" takes "<<mt[di][dj]<<" knight moves.\n";
	}
}
